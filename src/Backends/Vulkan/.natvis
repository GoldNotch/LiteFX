<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	<!-- Graphics Adapter -->
	<Type Name="LiteFX::Rendering::Backends::VulkanGraphicsAdapter">
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 == 0">uninitialized</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0">VulkanGraphicsAdapter {{ Name = { m_impl.m_ptr._Mypair._Myval2->m_name } (Device ID = { m_impl.m_ptr._Mypair._Myval2->m_deviceId }, LUID = { m_impl.m_ptr._Mypair._Myval2->m_luid }) }}</DisplayString>

		<Expand>
			<Item Name="Name">m_impl.m_ptr._Mypair._Myval2->m_name</Item>
			<Synthetic Name="Memory">
				<DisplayString>{ m_impl.m_ptr._Mypair._Myval2->m_deviceLocalMemory / 1048576 } Mb</DisplayString>
			</Synthetic>
			<Item Name="Type">m_impl.m_ptr._Mypair._Myval2->m_type,en</Item>
			<Item Name="Luid">m_impl.m_ptr._Mypair._Myval2->m_luid,nvoXb</Item>
			<Synthetic Name="Vendor ID">
				<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2->m_vendorId == 0x1002">AMD (0x{ m_impl.m_ptr._Mypair._Myval2->m_deviceId,nvoXb })</DisplayString>
				<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2->m_vendorId == 0x1010">ImgTec (0x{ m_impl.m_ptr._Mypair._Myval2->m_deviceId,nvoXb })</DisplayString>
				<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2->m_vendorId == 0x10DE">NVidia (0x{ m_impl.m_ptr._Mypair._Myval2->m_deviceId,nvoXb })</DisplayString>
				<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2->m_vendorId == 0x13B5">ARM (0x{ m_impl.m_ptr._Mypair._Myval2->m_deviceId,nvoXb })</DisplayString>
				<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2->m_vendorId == 0x5143">Qualcom (0x{ m_impl.m_ptr._Mypair._Myval2->m_deviceId,nvoXb })</DisplayString>
				<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2->m_vendorId == 0x8086">Intel (0x{ m_impl.m_ptr._Mypair._Myval2->m_deviceId,nvoXb })</DisplayString>
				<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2->m_vendorId != 0x1002 &amp;&amp; m_impl.m_ptr._Mypair._Myval2->m_vendorId != 0x1010 &amp;&amp; m_impl.m_ptr._Mypair._Myval2->m_vendorId != 0x10DE &amp;&amp; m_impl.m_ptr._Mypair._Myval2->m_vendorId != 0x13B5 &amp;&amp; m_impl.m_ptr._Mypair._Myval2->m_vendorId != 0x5143 &amp;&amp; m_impl.m_ptr._Mypair._Myval2->m_vendorId != 0x8086">Other (0x{ m_impl.m_ptr._Mypair._Myval2->m_deviceId,nvoXb })</DisplayString>
			</Synthetic>
			<Item Name="Device ID">m_impl.m_ptr._Mypair._Myval2->m_deviceId</Item>
			<Synthetic Name="Driver Version">
				<!-- NVidia format -->
				<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2->m_vendorId == 0x10DE">{ (m_impl.m_ptr._Mypair._Myval2->m_driverVersion &gt;&gt; 22) &amp; 0x3FFF }.{ (m_impl.m_ptr._Mypair._Myval2->m_driverVersion &gt;&gt; 14) &amp; 0x00FF }.{ (m_impl.m_ptr._Mypair._Myval2->m_driverVersion &gt;&gt; 6) &amp; 0x00FF }.{ (m_impl.m_ptr._Mypair._Myval2->m_driverVersion) &amp; 0x003F } (0x{ m_impl.m_ptr._Mypair._Myval2->m_driverVersion,nvoXb })</DisplayString>
				<!-- Intel format (NOTE: windows only, may print wrong version on other OS) -->
				<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2->m_vendorId == 0x8086">{ m_impl.m_ptr._Mypair._Myval2->m_driverVersion &gt;&gt; 14 }.{ m_impl.m_ptr._Mypair._Myval2->m_driverVersion &amp; 0x3FFFF } (0x{ m_impl.m_ptr._Mypair._Myval2->m_driverVersion,nvoXb })</DisplayString>
				<!-- Vulkan default format (AMD and others) -->
				<DisplayString Condition="(m_impl.m_ptr._Mypair._Myval2->m_vendorId != 0x8086) &amp;&amp; (m_impl.m_ptr._Mypair._Myval2->m_vendorId != 0x1F96)">{ (m_impl.m_ptr._Mypair._Myval2->m_driverVersion &amp; 0xFF000000) &gt;&gt; 24 }.{ (m_impl.m_ptr._Mypair._Myval2->m_driverVersion &amp; 0x00FF0000) &gt;&gt; 16 }.{ (m_impl.m_ptr._Mypair._Myval2->m_driverVersion &amp; 0x0000FF00) &gt;&gt; 8 }.{ (m_impl.m_ptr._Mypair._Myval2->m_driverVersion &amp; 0x000000FF) } (0x{ m_impl.m_ptr._Mypair._Myval2->m_driverVersion,nvoXb })</DisplayString>
			</Synthetic>
			<Synthetic Name="API Version">
				<DisplayString>{ (m_impl.m_ptr._Mypair._Myval2->m_apiVersion &gt;&gt; 22) &amp; 0x007F }.{ (m_impl.m_ptr._Mypair._Myval2->m_apiVersion &gt;&gt; 12) &amp; 0x03FF }.{ m_impl.m_ptr._Mypair._Myval2->m_apiVersion &amp; 0x0FFF } (Variant { m_impl.m_ptr._Mypair._Myval2->m_apiVersion &gt;&gt; 29 }, 0x{ m_impl.m_ptr._Mypair._Myval2->m_apiVersion,nvoXb })</DisplayString>
			</Synthetic>
			<Item Name="Limits">m_impl.m_ptr._Mypair._Myval2->m_limits</Item>
			<Item Name="Device Extensions">m_impl.m_ptr._Mypair._Myval2->m_deviceExtensions,view(simple)</Item>
			<Item Name="Device Layers">m_impl.m_ptr._Mypair._Myval2->m_deviceLayers,view(simple)</Item>
			<Item Name="[m_impl]">m_impl</Item>
		</Expand>
	</Type>
	
	<!-- Surface -->
	<Type Name="LiteFX::Rendering::Backends::VulkanSurface">
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 == 0">uninitialized</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0">VulkanSurface {{ hWnd = { m_impl.m_ptr._Mypair._Myval2->m_hwnd,handle } }}</DisplayString>

		<Expand>
			<Item Name="Window">m_impl.m_ptr._Mypair._Myval2->m_hwnd,handle</Item>
			<Item Name="[m_impl]">m_impl</Item>
		</Expand>
	</Type>

	<!-- Vertex Buffer Layout -->
	<Type Name="LiteFX::Rendering::Backends::VulkanVertexBufferLayout">
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 == 0">uninitialized</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0">VulkanVertexBufferLayout {{ Binding = { m_impl.m_ptr._Mypair._Myval2->m_binding }, Size = { m_impl.m_ptr._Mypair._Myval2->m_vertexSize } ({ m_impl.m_ptr._Mypair._Myval2->m_attributes._Mypair._Myval2._Mylast - m_impl.m_ptr._Mypair._Myval2->m_attributes._Mypair._Myval2._Myfirst } Attributes) }}</DisplayString>

		<Expand>
			<Item Name="Binding">m_impl.m_ptr._Mypair._Myval2->m_binding</Item>
			<Item Name="Buffer Type">m_impl.m_ptr._Mypair._Myval2->m_bufferType,en</Item>
			<Item Name="Vertex Size">m_impl.m_ptr._Mypair._Myval2->m_vertexSize</Item>
			<Item Name="Attributes">m_impl.m_ptr._Mypair._Myval2->m_attributes,view(simple)</Item>
			<Item Name="[m_impl]">m_impl</Item>
		</Expand>
	</Type>

	<!-- Index Buffer Layout -->
	<!-- 
	     TODO: For some reason this visualizer is unable to resolve some pImpl members in some circumstances due to this bug: https://developercommunity.visualstudio.com/t/Opaque-types-are-not-expandable-by-defau/513715.
               To fix this we will have to provide different natvis files depending on the library type (static/shared).	
	-->
	<!--
	<Type Name="LiteFX::Rendering::Backends::VulkanIndexBufferLayout">
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 == 0">uninitialized</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0">VulkanIndexBufferLayout {{ Binding = { ((LiteFX.Backends.Vulkand.dll!LiteFX::Rendering::Backends::VulkanIndexBufferLayout::VulkanIndexBufferLayoutImpl*)m_impl.m_ptr._Mypair._Myval2)->m_binding }, Index Type = { ((LiteFX.Backends.Vulkand.dll!LiteFX::Rendering::Backends::VulkanIndexBufferLayout::VulkanIndexBufferLayoutImpl*)m_impl.m_ptr._Mypair._Myval2)->m_indexType } }}</DisplayString>

		<Expand>
			<Item Name="Binding">((LiteFX.Backends.Vulkand.dll!LiteFX::Rendering::Backends::VulkanIndexBufferLayout::VulkanIndexBufferLayoutImpl*)m_impl.m_ptr._Mypair._Myval2)->m_binding</Item>
			<Item Name="Buffer Type">((LiteFX.Backends.Vulkand.dll!LiteFX::Rendering::Backends::VulkanIndexBufferLayout::VulkanIndexBufferLayoutImpl*)m_impl.m_ptr._Mypair._Myval2)->m_bufferType</Item>
			<Item Name="Index Type">((LiteFX.Backends.Vulkand.dll!LiteFX::Rendering::Backends::VulkanIndexBufferLayout::VulkanIndexBufferLayoutImpl*)m_impl.m_ptr._Mypair._Myval2)->m_indexType</Item>
			<Synthetic Name="Element Size">
				<DisplayString>{ ((LiteFX.Backends.Vulkand.dll!LiteFX::Rendering::Backends::VulkanIndexBufferLayout::VulkanIndexBufferLayoutImpl*)m_impl.m_ptr._Mypair._Myval2)->m_indexType &gt;&gt; 3 } Bytes</DisplayString>
			</Synthetic>
			<Item Name="[m_impl]">m_impl</Item>
		</Expand>
	</Type>
	-->
	<Type Name="LiteFX::Rendering::Backends::VulkanIndexBufferLayout">
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 == 0">uninitialized</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0">VulkanIndexBufferLayout {{ Binding = { m_impl.m_ptr._Mypair._Myval2->m_binding }, Index Type = { m_impl.m_ptr._Mypair._Myval2->m_indexType,en } }}</DisplayString>

		<Expand>
			<Item Name="Binding">m_impl.m_ptr._Mypair._Myval2->m_binding</Item>
			<Item Name="Buffer Type">m_impl.m_ptr._Mypair._Myval2->m_bufferType,en</Item>
			<Item Name="Index Type">m_impl.m_ptr._Mypair._Myval2->m_indexType,en</Item>
			<Synthetic Name="Element Size">
				<DisplayString>{ m_impl.m_ptr._Mypair._Myval2->m_indexType &gt;&gt; 3 } Bytes</DisplayString>
			</Synthetic>
			<Item Name="[m_impl]">m_impl</Item>
		</Expand>
	</Type>
	
	<!-- Input assembler -->
	<Type Name="LiteFX::Rendering::Backends::VulkanInputAssembler">
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 == 0">uninitialized</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0">VulkanInputAssembler {{ Topology = { m_impl.m_ptr._Mypair._Myval2->m_primitiveTopology,en }, Index Type = { m_impl.m_ptr._Mypair._Myval2->m_indexBufferLayout._Mypair._Myval2->m_impl.m_ptr._Mypair._Myval2->m_indexType,en } ({ m_impl.m_ptr._Mypair._Myval2->m_vertexBufferLayouts._List._Mypair._Myval2._Mysize } Vertex Buffer Layouts) }}</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0 &amp;&amp; m_impl.m_ptr._Mypair._Myval2->m_indexBufferLayout._Mypair._Myval2 == 0">VulkanInputAssembler {{ Topology = { m_impl.m_ptr._Mypair._Myval2->m_primitiveTopology,en }, Index Type = None ({ m_impl.m_ptr._Mypair._Myval2->m_vertexBufferLayouts._List._Mypair._Myval2._Mysize } Vertex Buffer Layouts) }}</DisplayString>

		<Expand>
			<Item Name="Primitive Topology">m_impl.m_ptr._Mypair._Myval2->m_primitiveTopology,en</Item>
			<Item Name="Index Buffer Layout">m_impl.m_ptr._Mypair._Myval2->m_indexBufferLayout</Item>
			<Synthetic Name="Vertex Buffer Layouts">
				<DisplayString>{{ Elements = { m_impl.m_ptr._Mypair._Myval2->m_vertexBufferLayouts._List._Mypair._Myval2._Mysize } }}</DisplayString>

				<Expand>
					<ExpandedItem>m_impl.m_ptr._Mypair._Myval2->m_vertexBufferLayouts._List,view(DictionaryHelper)</ExpandedItem>
				</Expand>
			</Synthetic>
			<Item Name="[m_impl]">m_impl</Item>
		</Expand>
	</Type>

	<!-- Buffer -->
	<Type Name="LiteFX::Rendering::Backends::VulkanBuffer">
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 == 0">uninitialized</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0">VulkanBuffer {{ Name = { ((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name }, Type = { m_impl.m_ptr._Mypair._Myval2->m_type,en }, Total Size = { (m_impl.m_ptr._Mypair._Myval2->m_alignment == 0 ? m_impl.m_ptr._Mypair._Myval2->m_elementSize : (m_impl.m_ptr._Mypair._Myval2->m_elementSize + m_impl.m_ptr._Mypair._Myval2->m_alignment - 1) &amp; ~(m_impl.m_ptr._Mypair._Myval2->m_alignment - 1)) * m_impl.m_ptr._Mypair._Myval2->m_elements } Bytes ({ m_impl.m_ptr._Mypair._Myval2->m_elements } Elements), Usage = { m_impl.m_ptr._Mypair._Myval2->m_usage,en } }}</DisplayString>

		<Expand>
			<ExpandedItem>(LiteFX::Rendering::Backends::IVulkanBuffer*)this,nd</ExpandedItem>
			<Item Name="Name">((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name</Item>
			<Item Name="Type">m_impl.m_ptr._Mypair._Myval2->m_type,en</Item>
			<Item Name="Layout" Condition="m_impl.m_ptr._Mypair._Myval2->m_type == LiteFX::Rendering::BufferType::Vertex">((LiteFX::Rendering::Backends::VulkanVertexBuffer*)this)->m_impl.m_ptr._Mypair._Myval2->m_layout</Item>
			<Item Name="Layout" Condition="m_impl.m_ptr._Mypair._Myval2->m_type == LiteFX::Rendering::BufferType::Index">((LiteFX::Rendering::Backends::VulkanIndexBuffer*)this)->m_impl.m_ptr._Mypair._Myval2->m_layout</Item>
			<Item Name="Usage">m_impl.m_ptr._Mypair._Myval2->m_usage,en</Item>
			<Item Name="Element Size">m_impl.m_ptr._Mypair._Myval2->m_elementSize</Item>
			<Item Name="Elements">m_impl.m_ptr._Mypair._Myval2->m_elements</Item>
			<Item Name="Alignment">m_impl.m_ptr._Mypair._Myval2->m_alignment</Item>
			<Synthetic Name="Aligned Element Size">
				<DisplayString>{ (m_impl.m_ptr._Mypair._Myval2->m_alignment == 0 ? m_impl.m_ptr._Mypair._Myval2->m_elementSize : (m_impl.m_ptr._Mypair._Myval2->m_elementSize + m_impl.m_ptr._Mypair._Myval2->m_alignment - 1) &amp; ~(m_impl.m_ptr._Mypair._Myval2->m_alignment - 1)) }</DisplayString>
			</Synthetic>
			<Synthetic Name="Total Size Size">
				<DisplayString>{ (m_impl.m_ptr._Mypair._Myval2->m_alignment == 0 ? m_impl.m_ptr._Mypair._Myval2->m_elementSize : (m_impl.m_ptr._Mypair._Myval2->m_elementSize + m_impl.m_ptr._Mypair._Myval2->m_alignment - 1) &amp; ~(m_impl.m_ptr._Mypair._Myval2->m_alignment - 1)) * m_impl.m_ptr._Mypair._Myval2->m_elements }</DisplayString>
			</Synthetic>
			<Item Name="Allocator">m_impl.m_ptr._Mypair._Myval2->m_allocator</Item>
			<Item Name="Allocation">m_impl.m_ptr._Mypair._Myval2->m_allocation</Item>
			<Item Name="[Resource]">(LiteFX::Resource&lt;VkBuffer_T *&gt;*)this</Item>
			<Item Name="[m_impl]">m_impl</Item>
		</Expand>
	</Type>
	
	<!-- Image -->
	<Type Name="LiteFX::Rendering::Backends::VulkanImage">
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 == 0">uninitialized</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0 &amp;&amp; m_impl.m_ptr._Mypair._Myval2->m_dimensions == LiteFX::Rendering::ImageDimensions::DIM_1">VulkanImage {{ Name = { ((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name }, { m_impl.m_ptr._Mypair._Myval2->m_extent.m_elements[0] } Px, Format = { m_impl.m_ptr._Mypair._Myval2->m_format }, Elements = { m_impl.m_ptr._Mypair._Myval2->m_elements } (Layers: { m_impl.m_ptr._Mypair._Myval2->m_layers }, Levels: { m_impl.m_ptr._Mypair._Myval2->m_levels }, Planes: { m_impl.m_ptr._Mypair._Myval2->m_planes }), Usage = { m_impl.m_ptr._Mypair._Myval2->m_usage } }}</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0 &amp;&amp; m_impl.m_ptr._Mypair._Myval2->m_dimensions == LiteFX::Rendering::ImageDimensions::DIM_2">VulkanImage {{ Name = { ((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name }, { m_impl.m_ptr._Mypair._Myval2->m_extent.m_elements[0] }x{ m_impl.m_ptr._Mypair._Myval2->m_extent.m_elements[1] } Px, Format = { m_impl.m_ptr._Mypair._Myval2->m_format }, Elements = { m_impl.m_ptr._Mypair._Myval2->m_elements } (Layers: { m_impl.m_ptr._Mypair._Myval2->m_layers }, Levels: { m_impl.m_ptr._Mypair._Myval2->m_levels }, Planes: { m_impl.m_ptr._Mypair._Myval2->m_planes }), Usage = { m_impl.m_ptr._Mypair._Myval2->m_usage } }}</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0 &amp;&amp; m_impl.m_ptr._Mypair._Myval2->m_dimensions == LiteFX::Rendering::ImageDimensions::DIM_3">VulkanImage {{ Name = { ((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name }, { m_impl.m_ptr._Mypair._Myval2->m_extent.m_elements[0] }x{ m_impl.m_ptr._Mypair._Myval2->m_extent.m_elements[1] }x{ m_impl.m_ptr._Mypair._Myval2->m_extent.m_elements[2] } Px, Format = { m_impl.m_ptr._Mypair._Myval2->m_format }, Elements = { m_impl.m_ptr._Mypair._Myval2->m_elements } (Layers: { m_impl.m_ptr._Mypair._Myval2->m_layers }, Levels: { m_impl.m_ptr._Mypair._Myval2->m_levels }, Planes: { m_impl.m_ptr._Mypair._Myval2->m_planes }), Usage = { m_impl.m_ptr._Mypair._Myval2->m_usage } }}</DisplayString>

		<Expand>
			<ExpandedItem>(LiteFX::Rendering::Backends::IVulkanImage*)this,nd</ExpandedItem>
			<Item Name="Name">((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name</Item>
			<Item Name="Format">m_impl.m_ptr._Mypair._Myval2->m_format</Item>
			<Item Name="Samples">m_impl.m_ptr._Mypair._Myval2->m_samples</Item>
			<Item Name="Dimensions">m_impl.m_ptr._Mypair._Myval2->m_dimensions</Item>
			<Item Name="Extent">m_impl.m_ptr._Mypair._Myval2->m_extent</Item>
			<Item Name="Layers">m_impl.m_ptr._Mypair._Myval2->m_layers</Item>
			<Item Name="Levels">m_impl.m_ptr._Mypair._Myval2->m_levels</Item>
			<Item Name="Planes">m_impl.m_ptr._Mypair._Myval2->m_planes</Item>
			<Item Name="Usage">m_impl.m_ptr._Mypair._Myval2->m_usage</Item>
			<Item Name="Allocator">m_impl.m_ptr._Mypair._Myval2->m_allocator</Item>
			<Item Name="Allocation">m_impl.m_ptr._Mypair._Myval2->m_allocationInfo</Item>
			<Item Name="[Resource]">(LiteFX::Resource&lt;VkImage_T *&gt;*)this</Item>
			<Item Name="[m_impl]">m_impl</Item>
		</Expand>
	</Type>

	<!-- Sampler -->
	<Type Name="LiteFX::Rendering::Backends::VulkanSampler">
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 == 0">uninitialized</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0">VulkanSampler {{ Name = { ((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name }, Filter = { m_impl.m_ptr._Mypair._Myval2->m_magFilter,en } | { m_impl.m_ptr._Mypair._Myval2->m_minFilter,en }, MipMapping = { m_impl.m_ptr._Mypair._Myval2->m_mipMapMode,en }, Anisotropy = { m_impl.m_ptr._Mypair._Myval2->m_anisotropy,g } }}</DisplayString>

		<Expand>
			<ExpandedItem>(LiteFX::Rendering::Backends::IVulkanSampler*)this,nd</ExpandedItem>
			<Item Name="Name">((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name</Item>
			<Item Name="Mag Filter">m_impl.m_ptr._Mypair._Myval2->m_magFilter</Item>
			<Item Name="Min Filter">m_impl.m_ptr._Mypair._Myval2->m_minFilter</Item>
			<Item Name="MipMap Mode">m_impl.m_ptr._Mypair._Myval2->m_mipMapMode</Item>
			<Item Name="MipMap Bias">m_impl.m_ptr._Mypair._Myval2->m_mipMapBias,g</Item>
			<Item Name="Min LOD">m_impl.m_ptr._Mypair._Myval2->m_minLod,g</Item>
			<Item Name="Max LOD">m_impl.m_ptr._Mypair._Myval2->m_maxLod,g</Item>
			<Item Name="Anisotropy">m_impl.m_ptr._Mypair._Myval2->m_anisotropy,g</Item>
			<Item Name="[Resource]">(LiteFX::Resource&lt;VkSampler_T *&gt;*)this</Item>
			<Item Name="[m_impl]">m_impl</Item>
		</Expand>
	</Type>
	
	<!-- BLAS -->
	<Type Name="LiteFX::Rendering::Backends::VulkanBottomLevelAccelerationStructure">
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 == 0">uninitialized</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0">VulkanBottomLevelAccelerationStructure {{ Name = { ((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name }, empty, Size = { m_impl.m_ptr._Mypair._Myval2->m_size }, Flags = { m_impl.m_ptr._Mypair._Myval2->m_flags,en } }}</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0 &amp;&amp; m_impl.m_ptr._Mypair._Myval2->m_triangleMeshes._Mypair._Myval2._Myfirst != m_impl.m_ptr._Mypair._Myval2->m_triangleMeshes._Mypair._Myval2._Mylast">VulkanBottomLevelAccelerationStructure {{ Name = { ((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name }, { m_impl.m_ptr._Mypair._Myval2->m_triangleMeshes._Mypair._Myval2._Mylast - m_impl.m_ptr._Mypair._Myval2->m_triangleMeshes._Mypair._Myval2._Myfirst } Triangle Meshes, Size = { m_impl.m_ptr._Mypair._Myval2->m_size }, Flags = { m_impl.m_ptr._Mypair._Myval2->m_flags,en } }}</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0 &amp;&amp; m_impl.m_ptr._Mypair._Myval2->m_boundingBoxes._Mypair._Myval2._Myfirst == m_impl.m_ptr._Mypair._Myval2->m_boundingBoxes._Mypair._Myval2._Mylast">VulkanBottomLevelAccelerationStructure {{ Name = { ((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name }, { m_impl.m_ptr._Mypair._Myval2->m_boundingBoxes._Mypair._Myval2._Mylast - m_impl.m_ptr._Mypair._Myval2->m_boundingBoxes._Mypair._Myval2._Myfirst } Bounding Boxes, Size = { m_impl.m_ptr._Mypair._Myval2->m_size }, Flags = { m_impl.m_ptr._Mypair._Myval2->m_flags,en } }}</DisplayString>

		<Expand>
			<Item Name="Name">((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name</Item>
			<Synthetic Name="Triangle Meshes" Condition="m_impl.m_ptr._Mypair._Myval2->m_triangleMeshes._Mypair._Myval2._Myfirst != m_impl.m_ptr._Mypair._Myval2->m_triangleMeshes._Mypair._Myval2._Mylast">
				<DisplayString>{ m_impl.m_ptr._Mypair._Myval2->m_triangleMeshes._Mypair._Myval2._Mylast - m_impl.m_ptr._Mypair._Myval2->m_triangleMeshes._Mypair._Myval2._Myfirst } Triangle Meshes</DisplayString>
				
				<Expand>
					<ExpandedItem>m_impl.m_ptr._Mypair._Myval2->m_triangleMeshes,view(simple)</ExpandedItem>
				</Expand>
			</Synthetic>
			<Synthetic Name="Bounding Boxes" Condition="m_impl.m_ptr._Mypair._Myval2->m_boundingBoxes._Mypair._Myval2._Myfirst != m_impl.m_ptr._Mypair._Myval2->m_boundingBoxes._Mypair._Myval2._Mylast">
				<DisplayString>{ m_impl.m_ptr._Mypair._Myval2->m_boundingBoxes._Mypair._Myval2._Mylast - m_impl.m_ptr._Mypair._Myval2->m_boundingBoxes._Mypair._Myval2._Myfirst } Bounding Boxes</DisplayString>
				
				<Expand>
					<ExpandedItem>m_impl.m_ptr._Mypair._Myval2->m_boundingBoxes,view(simple)</ExpandedItem>
				</Expand>
			</Synthetic>
			<Item Name="Flags">m_impl.m_ptr._Mypair._Myval2->m_flags,en</Item>
			<Synthetic Name="GPU Buffer">
				<DisplayString>{{ Name = { ((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name }, { m_impl.m_ptr._Mypair._Myval2->m_size } Bytes at offset { m_impl.m_ptr._Mypair._Myval2->m_offset,X } }}</DisplayString>

				<Expand>
					<Item Name="Buffer">m_impl.m_ptr._Mypair._Myval2->m_buffer</Item>
					<Item Name="Offset">m_impl.m_ptr._Mypair._Myval2->m_offset,X</Item>
					<Item Name="Size">m_impl.m_ptr._Mypair._Myval2->m_size</Item>
				</Expand>
			</Synthetic>
			<Item Name="Query Pool">m_impl.m_ptr._Mypair._Myval2->m_queryPool</Item>
			<Item Name="[Resource]">(LiteFX::Resource&lt;VkAccelerationStructureKHR_T *&gt;*)this</Item>
			<Item Name="[m_impl]">m_impl</Item>
		</Expand>
	</Type>

	<!-- TLAS -->
	<Type Name="LiteFX::Rendering::Backends::VulkanTopLevelAccelerationStructure">
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 == 0">uninitialized</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0">VulkanTopLevelAccelerationStructure {{ Name = { ((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name }, empty, Size = { m_impl.m_ptr._Mypair._Myval2->m_size }, Flags = { m_impl.m_ptr._Mypair._Myval2->m_flags,en } }}</DisplayString>
		<DisplayString Condition="m_impl.m_ptr._Mypair._Myval2 != 0 &amp;&amp; m_impl.m_ptr._Mypair._Myval2->m_instances._Mypair._Myval2._Myfirst != m_impl.m_ptr._Mypair._Myval2->m_instances._Mypair._Myval2._Mylast">VulkanTopLevelAccelerationStructure {{ Name = { ((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name }, { m_impl.m_ptr._Mypair._Myval2->m_instances._Mypair._Myval2._Mylast - m_impl.m_ptr._Mypair._Myval2->m_instances._Mypair._Myval2._Myfirst } Instances, Size = { m_impl.m_ptr._Mypair._Myval2->m_size }, Flags = { m_impl.m_ptr._Mypair._Myval2->m_flags,en } }}</DisplayString>

		<Expand>
			<Item Name="Name">((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name</Item>
			<Synthetic Name="Instances">
				<DisplayString>{ m_impl.m_ptr._Mypair._Myval2->m_instances._Mypair._Myval2._Mylast - m_impl.m_ptr._Mypair._Myval2->m_instances._Mypair._Myval2._Myfirst } Instances</DisplayString>

				<Expand>
					<ExpandedItem>m_impl.m_ptr._Mypair._Myval2->m_instances,view(simple)</ExpandedItem>
				</Expand>
			</Synthetic>
			<Item Name="Flags">m_impl.m_ptr._Mypair._Myval2->m_flags,en</Item>
			<Synthetic Name="GPU Buffer">
				<DisplayString>{{ Name = { ((LiteFX::Rendering::StateResource*)this)->m_impl.m_ptr._Mypair._Myval2->m_name }, { m_impl.m_ptr._Mypair._Myval2->m_size } Bytes at offset { m_impl.m_ptr._Mypair._Myval2->m_offset,X } }}</DisplayString>

				<Expand>
					<Item Name="Buffer">m_impl.m_ptr._Mypair._Myval2->m_buffer</Item>
					<Item Name="Offset">m_impl.m_ptr._Mypair._Myval2->m_offset,X</Item>
					<Item Name="Size">m_impl.m_ptr._Mypair._Myval2->m_size</Item>
				</Expand>
			</Synthetic>
			<Item Name="Query Pool">m_impl.m_ptr._Mypair._Myval2->m_queryPool</Item>
			<Item Name="[Resource]">(LiteFX::Resource&lt;VkAccelerationStructureKHR_T *&gt;*)this</Item>
			<Item Name="[m_impl]">m_impl</Item>
		</Expand>
	</Type>
</AutoVisualizer>