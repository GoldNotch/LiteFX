# Copyright (c) 2021 Carsten Rudolph
name: Publish Release

on:
  workflow_dispatch:
    inputs:
      major:
        description: 'Major Version'
        required: true
      minor:
        description: 'Minor Version'
        required: true
      build:
        description: 'Build Number'
        required: true
      releaseLog:
        description: 'Location of the Release Log file.'
        required: true

env:
  vulkanSdkVersion: '1.2.148.0' # Lowest version that ships with DXC is 1.2.148.0

jobs:
  build:
    name: Build ${{ matrix.profile }}
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        profile: [ windows-x64, windows-x86 ]
        include:
          - profile: windows-x64
            triplet: x64-windows
            architecture: x64
          - profile: windows-x86
            triplet: x86-windows
            architecture: x86

    steps:
      - name: Checking out sources
        uses: actions/checkout@master
        with:
          submodules: true

      - name: Update version
        working-directory: "${{ github.workspace }}"
        shell: powershell
        run: ".\\write-version.ps1 -major ${{ github.event.inputs.major }} -minor ${{ github.event.inputs.minor }} -build ${{ github.event.inputs.build }}"

      - name: Setup build environment
        id: setup-environment
        run: |
          echo "VCPKG_FEATURE_FLAGS=manifests" >> $env:GITHUB_ENV
          $vulkanDir = "C:\VulkanSDK\${{ env.vulkanSdkVersion }}"
          echo "Installing Vulkan SDK to: $($vulkanDir)..."
          echo "VULKAN_SDK=$($vulkanDir)" >> $env:GITHUB_ENV
          $buildPath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath('${{ github.workspace }}/../out/build/')
          Write-Output "::set-output name=buildPath::$($buildPath)"
          $installPath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath('${{ github.workspace }}/../out/install/')
          Write-Output "::set-output name=installPath::$($installPath)"
          New-Item -ItemType directory -Path $vulkanDir

      - name: Setup Vulkan SDK cache
        id: vulkan-sdk-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.VULKAN_SDK }}
          key: VulkanSDK-${{ env.vulkanSdkVersion }}-Windows

      - name: Setup Vulkan SDK
        if: steps.vulkan-sdk-cache.outputs.cache-hit != 'true'
        run: | 
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/${{ env.vulkanSdkVersion }}/windows/VulkanSDK-$${{ env.vulkanSdkVersion }}-Installer.exe" -OutFile VulkanSDK.exe           
          $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");           
          $installer.WaitForExit();

      - name: Retrieve latest CMake build
        uses: lukka/get-cmake@latest

      - name: Restore or build vcpkg
        uses: lukka/run-vcpkg@v6
        with:
          setupOnly: true
          vcpkgDirectory: '${{ github.workspace }}/src/Modules/vcpkg'
          appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}
          vcpkgTriplet: ${{ matrix.triplet }}
          additionalCachedPaths: ${{ steps.setup-environment.outputs.buildPath }}/vcpkg_installed

      - name: Build with CMake and Ninja (Debug)
        id: build-with-cmake-debug
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeSettingsJson
          cmakeSettingsJsonPath: '${{ github.workspace }}/src/CMakeSettings.json'
          configurationRegexFilter: '${{ matrix.architecture }}-Debug'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ steps.setup-environment.outputs.buildPath }}'
          
      - name: Upload build artifacts (Debug)
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: LiteFX-${{ matrix.triplet }}-build-dbg
          path: '${{ steps.setup-environment.outputs.buildPath }}'

      - name: Install with CMake (Debug)
        run: |
          Set-Location '${{ steps.setup-environment.outputs.buildPath }}/${{ matrix.architecture }}-Debug'
          cmake --install .
          
      - name: Build with CMake and Ninja (Release)
        id: build-with-cmake-release
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeSettingsJson
          cmakeSettingsJsonPath: '${{ github.workspace }}/src/CMakeSettings.json'
          configurationRegexFilter: '${{ matrix.architecture }}-Release'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ steps.setup-environment.outputs.buildPath }}'

      - name: Upload build artifacts (Release)
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: LiteFX-${{ matrix.triplet }}-build-rel
          path: '${{ steps.setup-environment.outputs.buildPath }}'

      - name: Install with CMake (Release)
        run: |
          Set-Location '${{ steps.setup-environment.outputs.buildPath }}/${{ matrix.architecture }}-Release'
          cmake --install .

      - name: Upload install artifacts
        uses: actions/upload-artifact@v2
        with:
          name: LiteFX-${{ matrix.triplet }}-install
          path: '${{ steps.setup-environment.outputs.buildPath }}/install'
          if-no-files-found: error 
          
  publish:
    name: 'Publish'
    needs: build
    runs-on: ubuntu-latest
      
    steps:
      - name: Checking out sources
        uses: actions/checkout@master
        with:
          submodules: true
          token: ${{ secrets.RELEASE_BOT_PAT }}

      - name: Update version
        working-directory: ${{ github.workspace }}
        run: |
          #sudo apt-get update
          #sudo apt-get install -y wget apt-transport-https software-properties-common
          #wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb
          #sudo dpkg -i packages-microsoft-prod.deb
          #sudo apt-get update
          #sudo apt-get install -y powershell
          pwsh -File .\\write-version.ps1 -major ${{ github.event.inputs.major }} -minor ${{ github.event.inputs.minor }} -build ${{ github.event.inputs.build }}

      - name: Build documentation
        uses: mattnotmitt/doxygen-action@v1
        with:
          working-directory: .
          doxyfile-path: ./.doxyfile

      - name: Collect changes and push commit
        uses: stefanzweifel/git-auto-commit-action@v4
        with:    
          commit_user_name: Release Bot 🤖
          commit_user_email: 18394207+github-actions[bot]@users.noreply.github.com
          commit_message: Release ${{ github.event.inputs.major }}.${{ github.event.inputs.minor }}.${{ github.event.inputs.build }} 🚀
          status_options: --untracked-files=all
          add_options: --ignore-removal
          #push_options: --force
          skip_dirty_check: true
          skip_fetch: true
          disable_globbing: true
          tagging_message: 'v${{ github.event.inputs.major }}.${{ github.event.inputs.minor }}.${{ github.event.inputs.build }}'
          
      - name: Download windows-x64 artifacts...
        uses: actions/download-artifact@master
        with:
          name: LiteFX-x64-windows-install
          path: artifacts/x64/
          
      - name: Zip x64 artifacts
        uses: papeloto/action-zip@v1
        with:
          files: artifacts/x64/
          dest: windows-x64.zip
          recursive: true
          
      - name: Download windows-x86 artifacts...
        uses: actions/download-artifact@master
        with:
          name: LiteFX-x86-windows-install
          path: artifacts/x86/
          
      - name: Zip x86 artifacts
        uses: papeloto/action-zip@v1
        with:
          files: artifacts/x86/
          dest: windows-x86.zip
          recursive: true
          
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
            artifacts: windows-x64.zip,windows-x86.zip
            token: ${{ secrets.RELEASE_BOT_PAT }}
            bodyFile: "${{ github.workspace }}/${{ github.event.inputs.releaseLog }}"
            name: "v${{ github.event.inputs.major }}.${{ github.event.inputs.minor }}.${{ github.event.inputs.build }}"
            tag: "v${{ github.event.inputs.major }}.${{ github.event.inputs.minor }}.${{ github.event.inputs.build }}"
