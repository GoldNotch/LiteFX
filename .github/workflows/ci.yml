# Copyright (c) 2021 Carsten Rudolph
name: Verify Build

on:
  workflow_dispatch:
    inputs:
      uploadArtifacts:
        description: 'Upload Artifacts'
        required: true
        default: 'false'
        
  pull_request:
    branches:
      - main

env:
  vulkanSdkVersion: '1.2.148.0' # Lowest version that ships with DXC is 1.2.148.0

jobs:
  job:
    name: ${{ matrix.os }}-ci
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        include:
          - os: windows-latest
            triplet: x64-windows
            configuration: x64-Release

    steps:
      - name: Checking out sources
        uses: actions/checkout@master
        with:
          submodules: true

      - name: Setup build environment
        id: setup-environment
        run: |
          echo "VCPKG_FEATURE_FLAGS=manifests" >> $env:GITHUB_ENV
          $vulkanDir = "C:\VulkanSDK\${{ env.vulkanSdkVersion }}"
          echo "Installing Vulkan SDK to: $($vulkanDir)..."
          echo "VULKAN_SDK=$($vulkanDir)" >> $env:GITHUB_ENV
          $buildPath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath('${{ github.workspace }}/../out/build/')
          Write-Output "::set-output name=buildPath::$($buildPath)"
          $installPath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath('${{ github.workspace }}/../out/install/')
          Write-Output "::set-output name=installPath::$($installPath)"
          New-Item -ItemType directory -Path $vulkanDir

      - name: Setup Vulkan SDK cache
        id: vulkan-sdk-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.VULKAN_SDK }}
          key: VulkanSDK-${{ env.vulkanSdkVersion }}-Windows

      - name: Setup Vulkan SDK
        if: steps.vulkan-sdk-cache.outputs.cache-hit != 'true'
        run: | 
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/${{ env.vulkanSdkVersion }}/windows/VulkanSDK-$${{ env.vulkanSdkVersion }}-Installer.exe" -OutFile VulkanSDK.exe           
          $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");           
          $installer.WaitForExit();

      - name: Retrieve latest CMake build
        uses: lukka/get-cmake@latest

      - name: Setup MSVC CLI
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Restore or build vcpkg
        uses: lukka/run-vcpkg@v6
        with:
          setupOnly: true
          vcpkgDirectory: '${{ github.workspace }}/src/Modules/vcpkg'
          appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}
          vcpkgTriplet: ${{ matrix.triplet }}
          additionalCachedPaths: ${{ steps.setup-environment.outputs.buildPath }}/vcpkg_installed

      - name: Build with CMake and Ninja
        id: build-with-cmake
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeSettingsJson
          cmakeSettingsJsonPath: '${{ github.workspace }}/src/CMakeSettings.json'
          configurationRegexFilter: '${{ matrix.configuration }}'
          useVcpkgToolchainFile: false
          buildDirectory: '${{ steps.setup-environment.outputs.buildPath }}'
      
      - name: Install with CMake
        run: |
          Set-Location '${{ steps.setup-environment.outputs.buildPath }}/${{ matrix.configuration }}'
          cmake --install .

      - name: Upload install artifacts
        if: ${{ github.event.inputs.uploadArtifacts == 'true' }}
        uses: actions/upload-artifact@v2
        with:
          name: LiteFX-${{ matrix.triplet }}-install
          path: '${{ steps.setup-environment.outputs.buildPath }}/install'
