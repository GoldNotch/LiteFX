# Copyright (c) 2020 Carsten Rudolph
name: Weekly

on:
  workflow_dispatch:
  schedule: 
    - cron: '1 0 * * 1'         # Run every monday night at 00:01 AM (UTC).

env:
  vulkanSdkVersion: '1.2.148.0' # Lowest version that ships with DXC is 1.2.148.0

jobs:
  job:
    name: ${{ matrix.os }}-Weekly
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        include:
          - os: windows-latest
            triplet: x64-windows
            configuration: x64-Release
            vcpkgCommitId: 'b79f7675aaa82eb6c5a96ae764fb1ce379a9d5d6'

    steps:
      - name: Checking out sources
        uses: actions/checkout@master
        with:
          submodules: true

      - name: Setup build environment
        id: setup-environment
        run: |
          $vulkanDir = "C:\VulkanSDK\${{ env.vulkanSdkVersion }}"
          echo "Installing Vulkan SDK to: $($vulkanDir)..."
          echo "VULKAN_SDK=$($vulkanDir)" >> $env:GITHUB_ENV
          $buildPath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath('${{ github.workspace }}/../out/build/')
          Write-Output "::set-output name=buildPath::$($buildPath)"
          $installPath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath('${{ github.workspace }}/../out/install/')
          Write-Output "::set-output name=installPath::$($installPath)"
          New-Item -ItemType directory -Path $vulkanDir

      - name: Setup Vulkan SDK cache
        id: vulkan-sdk-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.VULKAN_SDK }}
          key: VulkanSDK-${{ env.vulkanSdkVersion }}-Windows

      - name: Setup Vulkan SDK
        if: steps.vulkan-sdk-cache.outputs.cache-hit != 'true'
        run: | 
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/${{ env.vulkanSdkVersion }}/windows/VulkanSDK-$${{ env.vulkanSdkVersion }}-Installer.exe" -OutFile VulkanSDK.exe           
          $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");           
          $installer.WaitForExit();

      - name: Retrieve latest CMake build
        uses: lukka/get-cmake@latest

      - name: Restore or build vcpkg
        uses: lukka/run-vcpkg@v6
        with:
          setupOnly: true
          vcpkgDirectory: '${{ github.workspace }}/src/Modules/vcpkg'
          appendedCacheKey: ${{ hashFiles( '${{ github.workspace }}/src/vcpkg.json' ) }}
          vcpkgTriplet: ${{ matrix.triplet }}
          additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed

      - name: Build with CMake and Ninja
        id: build-with-cmake
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeSettingsJson
          cmakeSettingsJsonPath: '${{ github.workspace }}/src/CMakeSettings.json'
          cmakeAppendedArgs: '-DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }}'
          configurationRegexFilter: '${{ matrix.configuration }}'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ steps.setup-environment.outputs.buildPath }}'
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: LiteFX-${{ matrix.triplet }}-build
          path: '${{ steps.setup-environment.outputs.buildPath }}/${{ matrix.configuration }}'

      - name: Install with CMake
        run: |
          Set-Location '${{ steps.setup-environment.outputs.buildPath }}/${{ matrix.configuration }}'
          cmake --install .

      - name: Upload install artifacts
        uses: actions/upload-artifact@v2
        with:
          name: LiteFX-${{ matrix.triplet }}-install
          path: '${{ steps.setup-environment.outputs.buildPath }}/install'
